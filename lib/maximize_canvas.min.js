!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{var g;g="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,g.maximize_canvas=f()}}(function(){return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){function CanvasBinding(canvas,options,onResize){this.onResize=onResize,this.options=options,this.canvas=canvas,this.canvasHolder=document.createElement("div"),canvas.style.position="absolute",this.canvasHolder.style.position="absolute",this.canvasHolder.style.overflow="hidden",this.canvasHolder.appendChild(this.canvas),document.body.appendChild(this.canvasHolder);var self=this;this.resizeHandler=function(){self._resize()},window.addEventListener("resize",this.resizeHandler),this.resizeHandler()}var aspectToRect=require("aspect-to-rect"),fitRect=require("fit-rect");module.exports=function(canvas,options,onResize){return new CanvasBinding(canvas,options,onResize)},CanvasBinding.prototype.detach=function(){window.removeEventListener("resize",this.resizeHandler)};var canvasSize={width:0,height:0};CanvasBinding.prototype._resize=function(){var windowWidth=window.innerWidth,windowHeight=window.innerHeight;windowHeight<1&&(windowHeight=1),windowWidth<1&&(windowWidth=1),aspectToRect(windowWidth/windowHeight,this.options,canvasSize),this.canvas.width=canvasSize.width,this.canvas.height=canvasSize.height;var canvasPosition=fitRect([0,0,canvasSize.width,canvasSize.height],[0,0,windowWidth,windowHeight]);this.canvasHolder.style.left=canvasPosition[0]+"px",this.canvasHolder.style.top=canvasPosition[1]+"px",this.canvasHolder.style.width=this.canvas.style.width=canvasPosition[2]+"px",this.canvasHolder.style.height=this.canvas.style.height=canvasPosition[3]+"px",this.onResize&&this.onResize()}},{"aspect-to-rect":2,"fit-rect":3}],2:[function(require,module,exports){function singleAspectToRect(aspectRatio,options,r){var minMaxDefined,minWidth=0,maxWidth=Number.MAX_VALUE,minHeight=0,maxHeight=Number.MAX_VALUE;options.width&&(minMaxDefined=!1,options.width.hasOwnProperty("min")&&(minMaxDefined=!0,minWidth=+options.width.min),options.width.hasOwnProperty("max")&&(minMaxDefined=!0,maxWidth=+options.width.max),minMaxDefined||(minWidth=maxWidth=+options.width)),options.height&&(minMaxDefined=!1,options.height.hasOwnProperty("min")&&(minMaxDefined=!0,minHeight=+options.height.min),options.height.hasOwnProperty("max")&&(minMaxDefined=!0,maxHeight=+options.height.max),minMaxDefined||(minHeight=maxHeight=+options.height));var w1=minWidth,h1=w1/aspectRatio;h1<minHeight&&(h1=minHeight),h1>maxHeight&&(h1=maxHeight);var a1=w1/h1,h2=minHeight,w2=h2*aspectRatio;w2<minWidth&&(w2=minWidth),w2>maxWidth&&(w2=maxWidth);var a2=w2/h2;Math.abs(a1-aspectRatio)<Math.abs(a2-aspectRatio)?(r.width=w1,r.height=h1):(r.width=w2,r.height=h2)}module.exports=function(aspectRatio,options,result){var r=result||{width:0,height:0};if(aspectRatio<=0)return r.width=r.height=0,r;if(Array.isArray(options)){for(var bestW=0,bestH=0,bestDistance=Number.MAX_VALUE,i=0;i<options.length;++i){singleAspectToRect(aspectRatio,options[i],r);var newDistance=Math.abs(r.width/r.height-aspectRatio);newDistance<bestDistance&&(bestW=r.width,bestH=r.height,bestDistance=newDistance)}r.width=bestW,r.height=bestH}else singleAspectToRect(aspectRatio,options,r);return r}},{}],3:[function(require,module,exports){function fitRect(rect,target,mode){mode=mode||"contain";var sw=target[2]/rect[2],sh=target[3]/rect[3],scale=1;return"contain"==mode?scale=Math.min(sw,sh):"cover"==mode&&(scale=Math.max(sw,sh)),[target[0]+(target[2]-rect[2]*scale)/2,target[1]+(target[3]-rect[3]*scale)/2,rect[2]*scale,rect[3]*scale]}module.exports=fitRect},{}]},{},[1])(1)});
